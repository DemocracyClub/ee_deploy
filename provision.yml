---
- hosts: all
  pre_tasks:
    - name: Install python for Ansible
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      register: output
      changed_when: 'output.stdout != ""'
    - name: setup
      setup: filter=ansible_*
  vars_files:
    - vars.yml
    - vault.yml
  gather_facts: false
  become: true
  roles:
    - role: dc_commonscripts
    - role: dc_papertrail
      papertrail_log_destination: "{{ vault_papertrail_url }}"
  handlers:
    - import_tasks: handlers.yml

  tasks:

  - name: Create apt-daily.timer.d directory
    file: path=/etc/systemd/system/apt-daily.timer.d state=directory

  - name: Prevent systemd daily update race condition
    template:
      src: "files/systemd/apt-daily.timer.conf"
      dest: "/etc/systemd/system/apt-daily.timer.d/apt-daily.timer.conf"

  - name: Generate locales
    shell: locale-gen "en_GB.UTF-8"

  - name: Reconfigure locales
    shell: DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales

  - name: Install required system packages.
    apt:
      name: "{{ system_packages }}"
      state: present
      update_cache: yes

  - name: Update all packages
    apt: upgrade=safe

  - name: Upgrade NPM
    npm:
      name: npm
      global: true
      state: latest

  - name: Install required Python packages.
    pip:
      name: "{{ python_packages }}"
      executable: pip2

  - name: Create the project directory.
    file: state=directory path={{ project_root }}

  - name: Create user.
    user:
      home: "{{ project_root }}/home"
      name: "{{ project_name }}"
      shell: "/bin/bash"
      state: present

  - name: Update the project directory.
    file: group={{ project_name }} owner={{ project_name }} mode=755 state=directory path={{ project_root }}

  - name: Create the code directory.
    file: group={{ project_name }} owner={{ project_name }} mode=755 state=directory path={{ project_root }}/code/

  - name: Change permissions.
    shell: "chown -R {{ project_name }}:{{ project_name }} {{ project_root }}"

  - name: Install nginx configuration file.
    template: src=files/conf/nginx.conf dest=/etc/nginx/sites-enabled/{{ project_name }}
    notify: restart nginx

  - name: Remove default nginx file.
    file:
      path: /etc/nginx/sites-enabled/default
      state: absent
    notify: restart nginx

  - name: Install systemd init scripts.
    template:
      src: "files/systemd/{{ item }}.service"
      dest: "/etc/systemd/system/{{ project_name }}_{{ item }}.service"
    with_items: "{{ initfiles }}"
    notify:
      - reload systemd
      - restart web frontend

  - name: Install systemd socket scripts.
    template:
      src: "files/systemd/{{ item }}.socket"
      dest: "/etc/systemd/system/{{ project_name }}_gunicorn.socket"
    with_items: "{{ initfiles }}"
    notify:
      - reload systemd
      - restart web frontend

  - name: systemd gunicorn tmpfiles.d
    template:
      src: "files/systemd/{{ item }}.tmpfiles"
      dest: "/etc/tmpfiles.d/{{ project_name }}_gunicorn.conf"
    with_items: "{{ initfiles }}"
    notify:
      - reload systemd
      - restart web frontend

  - name: "enable gunicorn"
    shell: "systemctl enable {{ project_name }}_gunicorn.socket"

  - name: "start gunicorn"
    shell: "systemctl start {{ project_name }}_gunicorn.socket"
    notify:
      - restart web frontend
      - restart nginx

  - name: Set up handy bashrc file
    lineinfile:
      dest: "{{ project_root }}/home/.bashrc"
      line: 'cd && cd ../code && source ../env/bin/activate'

  - name: Install .pgpass file
    template:
      src: "files/conf/.pgpass"
      dest: "{{ project_root }}/home/.pgpass"
      owner: every_election
      group: every_election
      mode: 0600

  - name: Install backup_db_to_s3 script
    template:
      src: "files/scripts/backup_db_to_s3.sh"
      dest: "{{ project_root }}/home/backup_db_to_s3.sh"
      owner: every_election
      group: every_election
      mode: 0755

  - name: Install sync_map_layers_to_s3
    template:
      src: "files/scripts/sync_map_layers_to_s3.sh"
      dest: "{{ project_root }}/home/sync_map_layers_to_s3.sh"
      owner: every_election
      group: every_election
      mode: 0755

- import_playbook: deploy.yml
